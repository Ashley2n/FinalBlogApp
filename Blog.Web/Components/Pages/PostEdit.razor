<!-- Pages/PostEdit.razor -->
@page "/post/edit"
@page "/post/edit/{Id:guid}"
@inject IBlogService BlogService
@inject IUserService UserService

<h3>@(IsEdit ? "Edit Post" : "Create Post")</h3>

@if (isSaved)
{
    <p class="text-success">Post saved successfully.</p>
    <NavLink class="btn btn-outline-primary" href="/post/@model.Id">View Post</NavLink>
}
else if (isCanceled)
{
    <p class="text-muted">Edit canceled.</p>
    <NavLink class="btn btn-outline-secondary" href="/">Return to Dashboard</NavLink>
}
else
{
    <EditForm Model="@model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="model.Title" />
        </div>

        <div class="mb-3">
            <label>Body (max 1000 chars)</label>
            <InputTextArea class="form-control" @bind-Value="model.BodyText" />
            <small>@(model.BodyText?.Length ?? 0)/1000</small>
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
        <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter] public Guid? Id { get; set; }
    private BlogPost model = new();
    private bool IsEdit => Id.HasValue;
    private bool isSaved = false;
    private bool isCanceled = false;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var existing = await BlogService.GetPostAsync(Id!.Value);
            if (existing is not null) model = existing;
        }
        else
        {
            var userId = UserService.CurrentUserId ?? Guid.Empty;
            model.AuthorId = userId;
            model.AuthorName = "Current User"; // Replace with actual user name if available
        }
    }

    private async Task Save()
    {
        if ((model.BodyText?.Length ?? 0) > 1000)
            return;

        await BlogService.CreateOrUpdateAsync(model);
        isSaved = true;
    }

    private void Cancel()
    {
        isCanceled = true;
    }
}